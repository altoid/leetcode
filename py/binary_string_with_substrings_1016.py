#!/usr/bin/env python

# url for problem here

import unittest
from pprint import pprint
import random


def solution(s, n):
    l = (len(s) * (len(s) + 1)) // 2

    if n > l:
        return False

    l = len(s)

    substrings_to_numbers = {}
    if '0' in s:
        substrings_to_numbers["0"] = 0
    if '1' in s:
        substrings_to_numbers["1"] = 1

    # convert substrings to numbers

    for i in range(l):
        if s[i] == "0":
            continue

        for substring_length in range(1, l - i + 1):
            substring = s[i:i + substring_length]
#            print(substring)
            if substring in substrings_to_numbers:
                continue

            x = substrings_to_numbers[substring[:-1]] * 2
            if substring[-1] == "1":
                x += 1
            substrings_to_numbers[substring] = x

    all_values = set(substrings_to_numbers.values())
    for i in range(1, n + 1):
        if i not in all_values:
            return False

    return True


if __name__ == '__main__':
    solution("abcde", 1)


class MyTest(unittest.TestCase):
    def test_2(self):
        s
        n = 25

    def test_3(self):
        s
        n = 30
        print(len(s))

    def test_4(self):
        s = "0"
        n = 1